{"version":3,"sources":["webpack:///./src/pages/projects.tsx"],"names":["lightMode","darkMode","Item","colorMode","pageQuery","Projects","data","useColorMode","posts","toggleColorMode","allMdx","edges","getPosts","title","description","as","mt","marginX","maxWidth","fontWeight","theme","space","l","m","p","map","post","node","frontmatter","featured","image","background","fit","key","id","to","fields","slug","display","maxHeight","fluid","childImageSharp","dir","href","link","name","company","s","textMap","kind","projectTexts","excerpt"],"mappings":"8UAmBMA,EAAY,CAAH,4CAITC,EAAW,CAAH,4CAIRC,EAAO,kBAAH,mBAAG,CAAH,+IAQN,kBAAkC,UAAlC,EAAGC,UAAyCH,EAAYC,IARlD,2FA+FGG,EAAY,aAoCVC,UApGE,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAAW,EACUC,cAA/BJ,EADqB,EACrBA,UAEFK,GAHuB,EACVC,gBAVJ,SAACH,GAChB,OAAKA,EAAKI,OAGeJ,EAAKI,OAAtBC,MAFC,GAUKC,CAASN,IAEvB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKO,MAAM,WAAWC,YAAY,KAElC,YAAC,IAAD,CACEC,GAAG,KACHC,GAAG,OACHC,QAAQ,OACRC,SAAS,QACTC,WAAY,KAEZ,2CAPF,4BAUA,YAAC,IAAD,CAAMH,GAAII,IAAMC,MAAMC,EAAGL,QAAQ,OAAOC,SAAS,SAAjD,kEAIA,YAAC,IAAD,CAAMD,QAAQ,OAAOC,SAAS,SAA9B,yGAKA,YAAC,IAAD,CAAKH,GAAG,KAAKQ,EAAE,YAAYC,EAAG,EAAGN,SAAS,UACvCV,EAAMiB,KAAI,YAAoB,IAAXC,EAAW,EAAjBC,KAAiB,EACMD,EAAKE,YAAYC,SAA5CC,EADqB,EACrBA,MAAOC,EADc,EACdA,WAAYC,EADE,EACFA,IAE3B,OACE,YAAC9B,EAAD,CAAM+B,IAAKP,EAAKQ,GAAI/B,UAAWA,GAC7B,YAAC,IAAD,CAASgC,GAAIT,EAAKU,OAAOC,KAAMC,QAAQ,SACrC,YAAC,IAAD,CACEC,UAAU,QACVC,MAAOV,EAAMW,gBAAgBD,MAC7BT,WAAYA,EACZC,IAAKA,KAIT,YAAC,IAAD,CAAKU,IAAI,OACP,YAAC,IAAD,CAAcC,KAAMjB,EAAKE,YAAYgB,KAAMN,QAAQ,SACjD,YAAC,IAAD,CAAMO,KAAMnB,EAAKE,YAAYkB,WAG/B,YAAC,IAAD,CAASX,GAAIT,EAAKU,OAAOC,MACvB,YAAC,IAAD,CAASrB,GAAII,IAAMC,MAAM0B,EAAG5B,WAAY,KACtC,0BAASO,EAAKE,YAAYf,OAAgB,IACzCmC,YAAQtB,EAAKE,YAAYqB,KAAMC,OAIpC,YAAC,IAAD,CAAMlC,GAAII,IAAMC,MAAM0B,GAAIrB,EAAKyB","file":"component---src-pages-projects-tsx-a795a73c65b3f9269a0c.js","sourcesContent":["import * as React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport { theme } from '../utils/theme';\nimport styled from '@emotion/styled';\nimport Logo from '../components/Logo/Logo';\nimport { textMap, projectTexts } from '../utils/textMap';\nimport SEO from '../components/SEO';\nimport {\n  Heading,\n  Text,\n  useColorMode,\n  Box,\n  Link as ExternalLink,\n} from '@chakra-ui/core';\nimport { css } from '@emotion/core';\nimport CoverImage from '../components/CoverImage/CoverImage';\nimport { Link as MDXLink } from '../components/MDXComponents/MDXComponents';\n\nconst lightMode = css`\n  background: #edf2f7;\n`;\n\nconst darkMode = css`\n  background: #2c3442;\n`;\n\nconst Item = styled.li<{ colorMode: 'light' | 'dark' }>`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(256px, 1fr));\n  grid-gap: 32px;\n  list-style: none;\n  margin-bottom: 196px;\n  align-items: center;\n\n  ${({ colorMode }) => (colorMode === 'light' ? lightMode : darkMode)}\n\n  padding: 48px;\n  border-radius: 16px;\n  margin-bottom: 96px;\n\n  &:nth-of-type(even) {\n    direction: rtl;\n  }\n`;\n\n/**\n * Only return posts when Gatsby has run static site query\n */\nconst getPosts = (data) => {\n  if (!data.allMdx) {\n    return [];\n  }\n  const { edges: posts } = data.allMdx;\n\n  return posts;\n};\n\nconst Projects = ({ data }) => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  const posts = getPosts(data);\n\n  return (\n    <Layout>\n      <SEO title=\"Projects\" description=\"\" />\n\n      <Heading\n        as=\"h1\"\n        mt=\"80px\"\n        marginX=\"auto\"\n        maxWidth=\"960px\"\n        fontWeight={400}\n      >\n        <strong>Some projects</strong> I have been involved in\n      </Heading>\n\n      <Text mt={theme.space.l} marginX=\"auto\" maxWidth=\"960px\">\n        All of the projects have been a team collaboration and effort.\n      </Text>\n\n      <Text marginX=\"auto\" maxWidth=\"960px\">\n        I have been thoroughly fortunate to have been given the opportunity to\n        work with some amazing people.\n      </Text>\n\n      <Box as=\"ol\" m=\"80px auto\" p={0} maxWidth=\"1080px\">\n        {posts.map(({ node: post }) => {\n          const { image, background, fit } = post.frontmatter.featured;\n\n          return (\n            <Item key={post.id} colorMode={colorMode}>\n              <MDXLink to={post.fields.slug} display=\"block\">\n                <CoverImage\n                  maxHeight=\"360px\"\n                  fluid={image.childImageSharp.fluid}\n                  background={background}\n                  fit={fit}\n                />\n              </MDXLink>\n\n              <Box dir=\"ltr\">\n                <ExternalLink href={post.frontmatter.link} display=\"block\">\n                  <Logo name={post.frontmatter.company} />\n                </ExternalLink>\n\n                <MDXLink to={post.fields.slug}>\n                  <Heading mt={theme.space.s} fontWeight={400}>\n                    <strong>{post.frontmatter.title}</strong>{' '}\n                    {textMap(post.frontmatter.kind, projectTexts)}\n                  </Heading>\n                </MDXLink>\n\n                <Text mt={theme.space.s}>{post.excerpt}</Text>\n              </Box>\n            </Item>\n          );\n        })}\n      </Box>\n    </Layout>\n  );\n};\nexport const pageQuery = graphql`\n  query projectIndex {\n    allMdx(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 72)\n          frontmatter {\n            title\n            company\n            git\n            link\n            kind\n            featured {\n              image {\n                childImageSharp {\n                  fluid(maxWidth: 476) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n              background\n              fit\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\nexport default Projects;\n"],"sourceRoot":""}