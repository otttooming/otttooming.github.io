{"version":3,"sources":["webpack:///./src/pages/projects.tsx"],"names":["Wrapper","styled","ul","Container","Item","li","Content","div","StyledHeading","Heading","theme","fontWeight","normal","StyledLink","Link","Img","GatsbyImage","borderRadius","m","Description","space","l","Text","p","pageQuery","Projects","posts","data","allMdx","edges","getPosts","as","mt","s","map","post","node","featuredImgFluid","frontmatter","featuredImage","childImageSharp","fluid","key","id","name","company","link","to","fields","slug","title","textMap","kind","excerpt"],"mappings":"mOASMA,EAAUC,UAAOC,GAAV,oEAAGD,CAAH,iDAMPE,EAAYF,UAAOC,GAAV,sEAAGD,CAAH,kDAMTG,EAAOH,UAAOI,GAAV,iEAAGJ,CAAH,kLAaJK,EAAUL,UAAOM,IAAV,oEAAGN,CAAH,oBAIPO,EAAgBP,kBAAOQ,WAAV,0EAAGR,CAAH,qBACFS,QAAMC,WAAWC,QAG5BC,EAAaZ,kBAAOa,KAAV,uEAAGb,CAAH,yCAKVc,EAAMd,kBAAOe,KAAV,gEAAGf,CAAH,uBACUS,QAAMO,aAAaC,GAGhCC,EAAclB,UAAOM,IAAV,wEAAGN,CAAH,oBACDS,QAAMU,MAAMC,GAGtBC,EAAOrB,UAAOsB,EAAV,iEAAGtB,CAAH,eAmEGuB,EAAY,aAgCVC,UAnFE,SAAC,GAAa,IACvBC,EAVS,SAAAC,GACf,OAAKA,EAAKC,OAGeD,EAAKC,OAAtBC,MAFC,GAQKC,CADe,EAAXH,MAGlB,OACE,gBAAC,IAAD,KACE,gBAAC3B,EAAD,CAAS+B,GAAG,OACV,gBAACvB,EAAD,CAAewB,GAAItB,QAAMU,MAAMa,GAC7B,+CADF,4BAIA,gBAACd,EAAD,KACE,gBAACG,EAAD,uEAGA,gBAACA,EAAD,gHAOJ,gBAACnB,EAAD,KACGuB,EAAMQ,KAAI,YAAoB,IAAXC,EAAW,EAAjBC,KACNC,EACJF,EAAKG,YAAYC,cAAcC,gBAAgBC,MAEjD,OACE,gBAACrC,EAAD,CAAMsC,IAAKP,EAAKQ,IACd,gBAAC5B,EAAD,CAAK0B,MAAOJ,IACZ,gBAAC/B,EAAD,KACE,gBAAC,IAAD,CACEsC,KAAMT,EAAKG,YAAYO,QACvBC,KAAMX,EAAKG,YAAYQ,OAGzB,gBAACtC,EAAD,CAAewB,GAAItB,QAAMU,MAAMa,GAC7B,gBAACpB,EAAD,CAAYkC,GAAIZ,EAAKa,OAAOC,MAC1B,8BAASd,EAAKG,YAAYY,OAAgB,IACzCC,YAAQhB,EAAKG,YAAYc,QAI9B,yBAAIjB,EAAKkB","file":"component---src-pages-projects-tsx-dcdc102dbec035e35b31.js","sourcesContent":["import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport { Heading, theme } from \"@coterminous/ui\"\nimport styled from \"styled-components\"\nimport GatsbyImage from \"gatsby-image\"\nimport Logo from \"../components/Logo/Logo\"\nimport { textMap } from \"../utils/textMap\"\n\nconst Wrapper = styled.ul`\n  margin: 80px auto;\n  padding: 0;\n  max-width: 960px;\n`\n\nconst Container = styled.ul`\n  margin: 80px auto;\n  padding: 0;\n  max-width: 1080px;\n`\n\nconst Item = styled.li`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(256px, 1fr));\n  grid-gap: 32px;\n  list-style: none;\n  margin-bottom: 196px;\n  align-items: center;\n\n  &:nth-child(even) {\n    direction: rtl;\n  }\n`\n\nconst Content = styled.div`\n  direction: ltr;\n`\n\nconst StyledHeading = styled(Heading)`\n  font-weight: ${theme.fontWeight.normal};\n`\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`\n\nconst Img = styled(GatsbyImage)`\n  border-radius: ${theme.borderRadius.m};\n`\n\nconst Description = styled.div`\n  margin-top: ${theme.space.l};\n`\n\nconst Text = styled.p`\n  margin: 0;\n`\n\n/**\n * Only return posts when Gatsby has run static site query\n */\nconst getPosts = data => {\n  if (!data.allMdx) {\n    return []\n  }\n  const { edges: posts } = data.allMdx\n\n  return posts\n}\n\nconst Projects = ({ data }) => {\n  const posts = getPosts(data)\n\n  return (\n    <Layout>\n      <Wrapper as=\"div\">\n        <StyledHeading mt={theme.space.s}>\n          <strong>Some projects</strong> I have been involved in\n        </StyledHeading>\n\n        <Description>\n          <Text>\n            All of the projects have been a team collaboration and effort.\n          </Text>\n          <Text>\n            I have been thoroughly fortunate to have been given the opportunity\n            to work with some amazing people.\n          </Text>\n        </Description>\n      </Wrapper>\n\n      <Container>\n        {posts.map(({ node: post }) => {\n          const featuredImgFluid =\n            post.frontmatter.featuredImage.childImageSharp.fluid\n\n          return (\n            <Item key={post.id}>\n              <Img fluid={featuredImgFluid} />\n              <Content>\n                <Logo\n                  name={post.frontmatter.company}\n                  link={post.frontmatter.link}\n                />\n\n                <StyledHeading mt={theme.space.s}>\n                  <StyledLink to={post.fields.slug}>\n                    <strong>{post.frontmatter.title}</strong>{\" \"}\n                    {textMap(post.frontmatter.kind)}\n                  </StyledLink>\n                </StyledHeading>\n\n                <p>{post.excerpt}</p>\n              </Content>\n            </Item>\n          )\n        })}\n      </Container>\n    </Layout>\n  )\n}\nexport const pageQuery = graphql`\n  query projectIndex {\n    allMdx(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 72)\n          frontmatter {\n            title\n            company\n            git\n            link\n            kind\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\nexport default Projects\n"],"sourceRoot":""}